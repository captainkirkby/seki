User Management via RDF
I'm now calling my Seki project an application framework, and a primary use case is a Content Management System (I've just about got the core read/write functionality for this working). Such a thing clearly needs access control. This in turn needs user management, authorization and authentication. I've done quite a lot of reading around these factors, and recently did some work on Stanbol's user management component, so am feeling well informed enough to start implementing. I'm taking a very iterative approach to dev, starting simple and gradually getting more sophisticated. Get it working first, get it right later. Seki is centred around RESTful HTTP and RDF, and here are some of my design choices in this context.

A definition reminder from Wikipedia : The process of authorization is distinct from that of authentication. Whereas authentication is the process of verifying that "you are who you say you are", authorization is the process of verifying that "you are permitted to do what you are trying to do". Authorization thus presupposes authentication.

Authentication
Ultimately I'd like Seki to support a variety of authorization methods, but following the 'get it working first' I'm beginning with HTTP Basic. As it stands this is pretty insecure, but later I'll probably handle it over HTTPS which tightens things up (when I asked around, Hixie recommended Basic over HTTPS as a good approach). The next step after that will be WebId.

So -

Accepted dev path :
1. HTTP Basic : simple, standard
2. HTTP Basic : simple, more secure
3. WebId : based on FOAF+SSL, this offers a very user-friendly way to login. FOAF is RDF, so that ties in nicely with Seki's tect.

Rejected (for now at least) :
Cookies : rather ugly in architectural terms
HTTP Digest : rather ugly in implementation terms
OAuth : is complicated, has security holes and doesn't necessarily offer interop
[I've looked at a few other approaches, but the above are the most notable of the also-rans]

Authorization
Essentially the requirements here are to look up the authenticated user in a database and see what resources they can access. Seki is build on RDF, and the database is a triplestore (any store which has a SPARQL 1.1 endpoint), and the model for authorization based around an RDF vocabulary. The inherent Webbiness of RDF having URIs at it's heart lend it to use in a RESTful system.

In general best practices suggest reusing existing vocabs wherever possible to maximise interop. However for experimentation and rapid development it's perfectly reasonable to invent a totally new vocabulary, replacing or aligning terms later. In the case of authorization, much of the data will be specific to the local system (and needs to be securely protected) and so there isn't all that much potential for reuse. Hence I've put together a custom vocab, to what extent it's worth connecting to other vocabs remains to be seen.

There is some prior art around the vocab, most of it descended from the W3C ACL work. SIOC has quite a few relevant terms, and Stanbol uses the vocab Reto Bachmann-Gmuer designed for Clerezza. I've borrowed from each of these, and have been informed a fair bit by work Thomas Bergwinkle has done on the issue.

The simplest approach would be to start with users modelled as individual persons (as foaf:Person) or more generally as agents (foaf:Agent). But FOAF notes that a person/agent is distinct from an account on a site and hence adds indirection, Agent -> account -> OnlineAccount (this is also reflected in SIOC). It occurred to me that when working from the system's point of view, it's probably easier to think about users than user accounts, so I've got the term User. Say my login name is 'danja', then the corresponding resource on the system will be e.g. http://hyperdata.org/users/danja. But I have got a term for the indirection: User -> owner -> Agent.

A term I like from SIOC is Space, and I've loosely copied this to mean a set of resources. What I'm thinking is that a Space can be defined by a SPARQL SELECT query or a URI template.

Access Control Implementation
Ok, now for the Seki subsystem that will tie all this together. All the data is accessed via SPARQL 1.1, so in use, server-side a typical process would be having values such as 'login' (the user account name), 'accessMode' (Read, Write etc), 'spaceType' and 'spaceDefinition' (to list the relevant resources) being inserted into a predefined template, producing a SPARQL ASK query, with the result saying whether or not the given user can apply the requested operation on the given resource.

User Management
The plan here is to provide a series of forms for adding users (for individual users and administrators), associating permissions to users and roles, associating roles with users, defining spaces and so on. Server-side again this will be done through templated queries.
Client-side, in the first instance I'm planning on using jQuery/jQueryUI components and Backbone.js to RESTfully access resources corresponding to users, roles etc. Initially I'll just use regular form fields for the messages for POSTing these. I've not looked closely at this yet, but I hope to lean towards using JSON/RDF messages wherever appropriate.
Regarding API, like authentication I'd ultimately like Seki to support a variety of approaches: RESTful HTML form POSTs etc,  GET/POST/PUTing of Turtle and JSON graphs, endpoint-style access and so on.


