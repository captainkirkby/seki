/*
 * Pages 
 * 
 * sioc:Post items
 * 
 * TemplatingResponseHandler
 * (sekiResponse, message, queryTemplate, responseTemplate, responseOptions)
 */


// Common *************************************************************************************** 
rule DeletePage {
    when {
        rr : RequestRouter  rr.path.substring(0, 7) == "/pages/";
        rr : RequestRouter  rr.method == "delete";
        r : Route r.route["targetFunction"] == "";
    } then {
        log.debug("*** Delete rule triggered ***"); 
        modify(r, function(){this.route["type"] = "delete";});
        modify(r, function(){this.route["graph"] = "pages";});
        modify(r, function(){this.route["path"] = rr.path;});
        modify(r, function(){this.route["queryOptions"]["method"] = "POST";});
        modify(r, function(){this.route["targetFunction"] = "GenericHandler";});
        modify(r, function(){this.route["queryTemplate"] = "resourceDeleteTemplate";}); // needs graph & uri
        modify(r, function(){this.route["responseHandler"] = "TemplatingResponseHandler";});
        modify(r, function(){this.route["responseHeaders"] = {"Location" : "/"};});
        modify(r, function(){this.route["responseCode"] = "204";});
    }
}

// Turtle ***************************************************************************************
//         rr : RequestRouter  rr.contentType == "text/turtle";
// rr : RequestRouter  rr.headers["content-type"] == "text/turtle";
rule CreatePageTurtle {
    when {
        rr : RequestRouter  rr.path == "/pages";
        rr : RequestRouter  rr.method == "post";
        rr : RequestRouter  rr.contentType == "text/turtle";
        r : Route r.route["targetFunction"] == "";
    } then {
        log.debug("*** CreatePageTurtle rule triggered ***"); 
        modify(r, function(){this.route["type"] = "create";});
        modify(r, function(){this.route["graph"] = "pages";});
        modify(r, function(){this.route["path"] = rr.path;});
        modify(r, function(){this.route["queryOptions"]["headers"]["content-type"] = "application/sparql-update";});
        modify(r, function(){this.route["targetFunction"] = "GenericHandler";});
        modify(r, function(){this.route["responseHandler"] = "TemplatingResponseHandler";});
        modify(r, function(){this.route["queryTemplate"] = "turtleCreateTemplate";}); 
        modify(r, function(){this.route["responseHeaders"] = {"Location" : "/"};}); 
        modify(r, function(){this.route["responseCode"] = "201";});
    }
}
// application/sparql-update

//  
rule ReadGraphTurtle {
    when {
        rr : RequestRouter  rr.path.substring(0, 8) == "/graphs/";
        rr : RequestRouter  rr.method.toLowerCase()  == "get";
        rr : RequestRouter  rr.accept == "text/turtle";
        r : Route r.route["targetFunction"] == "";
    } then {
        log.debug("*** ReadGraphTurtle rule triggered ***"); 
        modify(r, function(){this.route["type"] = "read";});
        modify(r, function(){this.route["graph"] =  rr.path;});
        modify(r, function(){this.route["path"] = rr.path;});
        
        modify(r, function(){this.route["queryOptions"]["method"] = "GET";});
        
        modify(r, function(){this.route["queryOptions"]["path"] = config.client["queryEndpoint"];});
        modify(r, function(){this.route["targetFunction"] = "GenericHandler";});
        modify(r, function(){this.route["queryTemplate"] = "readGraphTemplate";}); // needs graph & uri
        modify(r, function(){this.route["viewTemplate"] = "minimalViewTemplate";}); // needs graph & uri
        modify(r, function(){this.route["responseHandler"] = "TemplatingResponseHandler";});
        
        modify(r, function(){this.route["responseCode"] = "200";});
    }
}

rule ReadPageTurtle {
    when {
        rr : RequestRouter  rr.path.substring(0, 7) == "/pages/";
        rr : RequestRouter  rr.method.toLowerCase()  == "get";
        rr : RequestRouter  rr.accept == "text/turtle";
        r : Route r.route["targetFunction"] == "";
    } then {
        log.debug("*** ReadPageTurtle rule triggered ***"); 
        modify(r, function(){this.route["type"] = "read";});
        modify(r, function(){this.route["graph"] = "pages";});
        modify(r, function(){this.route["path"] = rr.path;});
      
        modify(r, function(){this.route["queryOptions"]["method"] = "GET";});
        
        modify(r, function(){this.route["queryOptions"]["path"] = config.client["queryEndpoint"];});
        modify(r, function(){this.route["targetFunction"] = "GenericHandler";});
        modify(r, function(){this.route["queryTemplate"] = "turtleReadTemplate";}); // needs graph & uri
        modify(r, function(){this.route["viewTemplate"] = "minimalViewTemplate";}); // needs graph & uri
        modify(r, function(){this.route["responseHandler"] = "TemplatingResponseHandler";});
        
        modify(r, function(){this.route["responseCode"] = "200";});
    }
}

// requestParams {"method":"put","path":"/pages/ApiTest","accept":"","contentType":"text/turtle"}

//         rr : RequestRouter  rr.path.substring(0, 7) == "/pages/";

// note GRAPH
rule UpdatePageTurtle {
    when {
        rr : RequestRouter  rr.path.substring(0, 7) == "/pages/";
        rr : RequestRouter  rr.method.toLowerCase() == "put";
        rr : RequestRouter  rr.contentType == "text/turtle";
        r : Route r.route["targetFunction"] == "";
    } then {
        log.debug("*** UpdatePageTurtle rule triggered ***"); 
        modify(r, function(){this.route["type"] = "update";});
        modify(r, function(){this.route["graph"] = config.uriBase+"/pages";});
        modify(r, function(){this.route["path"] = rr.path;});
        modify(r, function(){this.route["queryOptions"]["method"] = "POST";});
        modify(r, function(){this.route["queryOptions"]["headers"]["content-type"] = "application/sparql-update";});
        modify(r, function(){this.route["targetFunction"] = "GenericHandler";});
        modify(r, function(){this.route["responseHandler"] = "TemplatingResponseHandler";});
        modify(r, function(){this.route["queryTemplate"] = "turtleUpdateTemplate";}); 
        modify(r, function(){this.route["responseHeaders"] = {"Location" : "/"};}); 
        modify(r, function(){this.route["responseCode"] = "201";});
    }
}

rule UpdateGraphTurtle {
    when {
        rr : RequestRouter  rr.path.substring(0, 8) == "/graphs/";
        rr : RequestRouter  rr.method.toLowerCase() == "put";
        rr : RequestRouter  rr.contentType == "text/turtle";
        r : Route r.route["targetFunction"] == "";
    } then {
        log.debug("*** UpdateGraphTurtle rule triggered ***"); 
        modify(r, function(){this.route["type"] = "update";});
        modify(r, function(){this.route["graph"] = rr.path;});
        modify(r, function(){this.route["path"] = rr.path;});
        modify(r, function(){this.route["queryOptions"]["method"] = "POST";});
        modify(r, function(){this.route["queryOptions"]["headers"]["content-type"] = "application/sparql-update";});
        modify(r, function(){this.route["targetFunction"] = "GenericHandler";});
        modify(r, function(){this.route["responseHandler"] = "TemplatingResponseHandler";});
        modify(r, function(){this.route["queryTemplate"] = "updateGraphTemplate";}); 
        modify(r, function(){this.route["responseHeaders"] = {"Location" : "/"};}); 
        modify(r, function(){this.route["responseCode"] = "201";});
    }
}



// JSON ******************************************************************************************************
rule CreatePageJSON {
    when {
        rr : RequestRouter  rr.path == "/pages";
        rr : RequestRouter  rr.method.toLowerCase() == "post";
        rr : RequestRouter  rr.contentType == "application/json";
        r : Route r.route["targetFunction"] == "";
    } then {
        log.debug("*** CreatePage rule triggered ***"); 
     //   modify(r, function(){this.route["path"] = rr.path.substring(6);});
        // application/sparql-update
        modify(r, function(){this.route["queryOptions"]["headers"]["Content-type"] = "application/sparql-update";});
        modify(r, function(){this.route["targetFunction"] = "GenericHandler";});
        modify(r, function(){this.route["responseHandler"] = "CreateHandler";});
        modify(r, function(){this.route["queryTemplate"] = "itemTemplate";}); 
    }
}

rule UpdatePageJSON {
    when {
        rr : RequestRouter  rr.path.substring(0, 7) == "/pages/";
        rr : RequestRouter  rr.method.toLowerCase() == "put";
        rr : RequestRouter  rr.contentType == "application/json";
        r : Route r.route["targetFunction"] == "";
    } then {
        log.debug("*** CreatePage rule triggered ***"); 
        //   modify(r, function(){this.route["path"] = rr.path.substring(6);});
        modify(r, function(){this.route["targetFunction"] = "GenericHandler";});
        modify(r, function(){this.route["responseHandler"] = "CreateHandler";});
        modify(r, function(){this.route["queryTemplate"] = "itemTemplate";}); 
}
}

